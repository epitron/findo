#!/usr/bin/env ruby

require 'epitools'
require 'rb-inotify'
require_relative "file_index"

class Array
  def flagged?(*array)
    (array & self).any?
  end
end

# class Ev
#   attr_accessor :path, :type
#   def initialize(event)
#     @path = event.absolute_name
#     case event.flags
#     when :moved_from, :delete
#       :remove
#     when :attrib, :close_write, :moved_to
#       :update
#     end
#   end  
# end

class EventQueue

  attr_accessor :queue, :index

  def initialize(index)
    @queue = []
    @index = index
  end

  def any?
    queue.any?
  end

  def <<(event)
    #queue |= [event]
    queue << event
  end

  REMOVE_FLAGS = [:moved_from, :delete]
  UPDATE_FLAGS = [:attrib, :close_write, :moved_to]

  def process!
    return if queue.empty?

    # TODO: Optimize the queue:
    #    - if two update events (:attrib, :close_write, :moved_to) occur in a row, merge them

    queue.group_by(&:absolute_name).each do |path, events|

      p path: path, id: path.object_id

      # events.each_cons(2).select { |a,b| ev.flags }

      #
      # Events => :close_write, :attrib, :move, :moved_from, :delete
      #
      # $ touch butts
      # /home/epi/butts ([:attrib])
      # /home/epi/butts ([:close_write, :close])
      #
      # $ mv whee whee2
      # /home/epi/whee ([:moved_from, :move])
      # /home/epi/whee2 ([:moved_to, :move])
      # => equivalent to delete and create
      #

      # TODO: Collapse redundant events (eg: attrib + close_write, anything ending in delete, etc.)
      flags = events.map(&:flags).flatten

      if (flags & REMOVE_FLAGS).any?
        puts "  - <12>removed: <14>#{path}".colorize
        index.delete path
      elsif (flags & UPDATE_FLAGS).any?
        puts "  - <10>added: <11>#{path}".colorize
        index.add path
      else
        puts "Unknown flags: #{flags.inspect}"
      end

    end

    queue.clear
  end

end

queue    = EventQueue.new(FileIndex.new(log: true))
notifier = INotify::Notifier.new

dir      = Path[ARGV.first]
puts "<8>* <14>Watching <11>#{dir}</11>...".colorize

# :close_write, :modify, :attrib, :move, :delete
notifier.watch(dir, :close_write, :attrib, :move, :delete) do |event|
  puts "<14>#{event.absolute_name} <8>=> <11>#{event.flags.inspect}".colorize
  queue << event
end

#
# Process events if:
# - there's been no event for 5 seconds
#       OR
# - there's been no processing for 15 seconds
#
activity_throttle = 5
sync_throttle     = 15

last_sync     = Time.at(0)
last_activity = Time.at(0)

loop do
  puts "--- LOOP --------------"

  # if IO.select([notifier.to_io], [], [], activity_throttle)
  if IO.select([notifier.to_io], [], [], 2)
    puts "select: events!"
    # event received
    notifier.process
    last_activity = Time.now
  else
    puts "select: timeout"
  end

  now = Time.now

  activity_delta   = now - last_activity
  sync_delta       = now - last_sync

  activity_expired = activity_delta > activity_throttle
  sync_expired     = sync_delta > sync_throttle

  if activity_expired or sync_expired
    puts "* Queue check..."
    if queue.any?
      puts "  |_ THINGS IN QUEUE! Processing..."
      queue.process!
      last_sync = now
    end
  end

  puts "-----------------------"
  puts
end

# ## Flags

# `:access` : A file is accessed (that is, read).
# `:attrib` : A file's metadata is changed (e.g. permissions, timestamps, etc).
# `:close_write` : A file that was opened for writing is closed.
# `:close_nowrite` : A file that was not opened for writing is closed.
# `:modify` : A file is modified.
# `:open` : A file is opened.

# ### Directory-Specific Flags

# These flags only apply when a directory is being watched.

# `:moved_from` : A file is moved out of the watched directory.
# `:moved_to` : A file is moved into the watched directory.
# `:create` : A file is created in the watched directory.
# `:delete` : A file is deleted in the watched directory.
# `:delete_self` : The watched file or directory itself is deleted.
# `:move_self` : The watched file or directory itself is moved.

# ### Helper Flags

# These flags are just combinations of the flags above.

# `:close` : Either `:close_write` or `:close_nowrite` is activated.
# `:move` : Either `:moved_from` or `:moved_to` is activated.
# `:all_events` : Any event above is activated.

# ### Options Flags

# These flags don't actually specify events.
# Instead, they specify options for the watcher.

# `:onlydir` : Only watch the path if it's a directory.
# `:dont_follow` : Don't follow symlinks.
# `:mask_add` : Add these flags to the pre-existing flags for this path.
# `:oneshot` : Only send the event once, then shut down the watcher.
# `:recursive`
#   Recursively watch any subdirectories that are created.
#   Note that this is a feature of rb-inotify,
#   rather than of inotify itself, which can only watch one level of a directory.
#   This means that the {Event#name} field
#   will contain only the basename of the modified file.
#   When using `:recursive`, {Event#absolute_name} should always be used.
